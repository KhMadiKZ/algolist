<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- saved from url=(0088)file:///E:/olymp/books/unsorted/e-maxx(MAXimal)/e-maxx(new)/inscribed_circle_ternary.htm -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1251"><title>MAXimal :: algo :: Нахождение вписанной окружности в выпуклом многоугольнике с помощью тернарного поиска</title><link rel="stylesheet" type="text/css" href="./MAXimal    algo    Нахождение вписанной окружности в выпуклом многоугольнике с помощью тернарного поиска_files/style.css" tppabs="http://e-maxx.ru/data/style.css"><link rel="stylesheet" type="text/css" href="./MAXimal    algo    Нахождение вписанной окружности в выпуклом многоугольнике с помощью тернарного поиска_files/geshi.css" tppabs="http://e-maxx.ru/geshi/geshi.css"><!--[if IE]><style>.menu a, .menu a:hover { width: 100%; }</style><![endif]--></head><body><table class="main" cellpadding="0" cellspacing="0"><tbody><tr><td class="title" colspan="2"><p>MAXimal</p></td></tr><tr><td class="menu"><ul><li><a href="javascript:if(confirm('http://e-maxx.ru/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://e-maxx.ru/index.php'" tppabs="http://e-maxx.ru/index.php">home</a></li><li><a href="file:///E:/olymp/books/unsorted/e-maxx(MAXimal)/e-maxx(new)/index.htm" tppabs="http://e-maxx.ru/algo/" class="current">algo</a></li><li><a href="javascript:if(confirm('http://e-maxx.ru/wiki/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://e-maxx.ru/wiki/'" tppabs="http://e-maxx.ru/wiki/">wiki</a></li><li><a href="javascript:if(confirm('http://e-maxx.ru/bookz/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://e-maxx.ru/bookz/'" tppabs="http://e-maxx.ru/bookz/">bookz</a></li><li><a href="javascript:if(confirm('http://e-maxx.ru/forum/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://e-maxx.ru/forum/'" tppabs="http://e-maxx.ru/forum/">forum</a></li><li><a href="javascript:if(confirm('http://e-maxx.ru/about.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://e-maxx.ru/about.php'" tppabs="http://e-maxx.ru/about.php">about</a></li></ul></td><td class="content"><p class="algoinfo">прочитано: 1727 раз<br>добавлено: 11 Jun 2008 10:33<br>редактировано: 11 Jun 2008 10:34</p><h1>Нахождение вписанной окружности в выпуклом многоугольнике с помощью тернарного поиска</h1>

<p>Дан выпуклый многоугольник с N вершинами. Требуется найти координаты центра и радиус наибольшей вписанной окружности.</p>
<p>Здесь описывается простой метод решения этой задачи с помощью двух тернарных поисков, работающий за <b>O (N log<sup>2</sup> C)</b>, где C - коэффициент, определяемый величиной координат и требуемой точностью (см. ниже).</p>
<h2>Алгоритм</h2>
<p>Определим функцию <b>Radius (X, Y)</b>, возвращающую радиус вписанной в данный многоугольник окружности с центром в точке (X;Y). Предполагается, что точки X и Y лежат внутри (или на границе) многоугольника. Очевидно, эту функцию легко реализовать с асимптотикой <b>O (N)</b> - просто проходим по всем сторонам многоугольника, считаем для каждой расстояние до центра (причём расстояние можно брать как от прямой до точки, не обязательно рассматривать как отрезок), и возвращаем минимум из найденных расстояний - очевидно, он и будет наибольшим радиусом.</p>
<p>Итак, нам нужно максимизировать эту функцию. Заметим, что, поскольку многоугольник выпуклый, то эта функция будет пригодна для <b>тернарного поиска</b> по обоим аргументам: при фиксированном X<sub>0</sub> (разумеется, таком, что прямая X=X<sub>0</sub> пересекает многоугольник) функция Radius(X<sub>0</sub>, Y) как функция одного аргумента Y будет сначала возрастать, затем убывать (опять же, мы рассматриваем только такие Y, что точка (X<sub>0</sub>, Y) принадлежит многоугольнику). Более того, функция max (по Y) { Radius (X, Y) } как функция одного аргумента X будет сначала возрастать, затем убывать. Эти свойства ясны из геометрических соображений.</p>
<p>Таким образом, нам нужно сделать два тернарных поиска: по X и внутри него по Y, максимизируя значение функции Radius. Единственный особый момент - нужно правильно выбирать границы тернарных поисков, поскольку вычисление функции Radius за пределами многоугольника будет некорректным. Для поиска по X никаких сложностей нет, просто выбираем абсциссу самой левой и самой правой точки. Для поиска по Y находим те отрезки многоугольника, в которые попадает текущий X, и находим ординаты точек этих отрезков при абсциссе X (вертикальные отрезки не рассматриваем).</p>
<p>Осталось оценить <b>асимптотику</b>. Пусть максимальное значение, которое могут принимать координаты - это C<sub>1</sub>, а требуемая точность - порядка 10<sup>-C<sub>2</sub></sup>, и пусть C = C<sub>1</sub> + C<sub>2</sub>. Тогда количество шагов, которые должен будет совершить каждый тернарный поиск, есть величина O (log C), и итоговая асимптотика получается: O (N log<sup>2</sup> C).</p>
<h2>Реализация</h2>
<p>Константа steps определяет количество шагов обоих тернарных поисков.</p>
<p>В реализации стоит отметить, что для каждой стороны сразу предпосчитываются коэффициенты в уравнении прямой, и сразу же нормализуются (делятся на sqrt(A<sup>2</sup>+B<sup>2</sup>)), чтобы избежать лишних операций внутри тернарного поиска.</p>
<pre>const double EPS = 1E-9;
int steps = 60;

struct pt {
	double x, y;
};

struct line {
	double a, b, c;
};

double dist (double x, double y, line &amp; l) {
	return abs (x * l.a + y * l.b + l.c);
}

double radius (double x, double y, vector&lt;line&gt; &amp; l) {
	int n = (int) l.size();
	double res = INF;
	for (int i=0; i&lt;n; ++i)
		res = min (res, dist (x, y, l[i]));
	return res;
}

double y_radius (double x, vector&lt;pt&gt; &amp; a, vector&lt;line&gt; &amp; l) {
	int n = (int) a.size();
	double ly = INF,  ry = -INF;
	for (int i=0; i&lt;n; ++i) {
		int x1 = a[i].x,  x2 = a[(i+1)%n].x,  y1 = a[i].y,  y2 = a[(i+1)%n].y;
		if (x1 == x2)  continue;
		if (x1 &gt; x2)  swap (x1, x2),  swap (y1, y2);
		if (x1 &lt;= x+EPS &amp;&amp; x-EPS &lt;= x2) {
			double y = y1 + (x - x1) * (y2 - y1) / (x2 - x1);
			ly = min (ly, y);
			ry = max (ry, y);
		}
	}
	for (int sy=0; sy&lt;steps; ++sy) {
		double diff = (ry - ly) / 3;
		double y1 = ly + diff,  y2 = ry - diff;
		double f1 = radius (x, y1, l),  f2 = radius (x, y2, l);
		if (f1 &lt; f2)
			ly = y1;
		else
			ry = y2;
	}
	return radius (x, ly, l);
}

int main() {

	int n;
	vector&lt;pt&gt; a (n);
	... чтение a ...

	vector&lt;line&gt; l (n);
	for (int i=0; i&lt;n; ++i) {
		l[i].a = a[i].y - a[(i+1)%n].y;
		l[i].b = a[(i+1)%n].x - a[i].x;
		double sq = sqrt (l[i].a*l[i].a + l[i].b*l[i].b);
		l[i].a /= sq,  l[i].b /= sq;
		l[i].c = - (l[i].a * a[i].x + l[i].b * a[i].y);
	}

	double lx = INF,  rx = -INF;
	for (int i=0; i&lt;n; ++i) {
		lx = min (lx, a[i].x);
		rx = max (rx, a[i].x);
	}

	for (int sx=0; sx&lt;stepsx; ++sx) {
		double diff = (rx - lx) / 3;
		double x1 = lx + diff,  x2 = rx - diff;
		double f1 = y_radius (x1, a, l),  f2 = y_radius (x2, a, l);
		if (f1 &lt; f2)
			lx = x1;
		else
			rx = x2;
	}

	double ans = y_radius (lx, a, l);
	printf ("%.7lf", ans);

}</pre></td></tr></tbody></table><table width="100%"><tbody><tr><td><p style="text-align:center;"><img src="./MAXimal    algo    Нахождение вписанной окружности в выпуклом многоугольнике с помощью тернарного поиска_files/valid-html401-blue.png" tppabs="http://www.w3.org/Icons/valid-html401-blue" alt="Valid HTML 4.01 Strict" height="31" width="88"><img src="./MAXimal    algo    Нахождение вписанной окружности в выпуклом многоугольнике с помощью тернарного поиска_files/valid-css2-blue.png" tppabs="http://www.w3.org/Icons/valid-css2-blue" alt="Valid CSS 2.1" height="31" width="88"></p></td></tr></tbody></table></body></html>